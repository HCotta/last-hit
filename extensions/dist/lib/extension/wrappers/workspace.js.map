{"version":3,"sources":["../lib/extension/wrappers/workspace.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AACA,qCAA6F;AAI7F;IAAyD,uDAExD;IAOA,6CACC,UAA6D,EAC7D,MAAkC;QAFnC,YAIC,kBAAM,UAAU,EAAE,MAAM,CAAC,SAezB;QAbA,KAAI,CAAC,QAAQ,GAAG;YACf,aAAa,EAAE,UAAU,CAAC,wBAAwB;YAClD,eAAe,EAAE,UAAU,CAAC,kBAAkB;YAC9C,mBAAmB,EAAE,UAAU,CAAC,qBAAqB;YACrD,mBAAmB,EAAE,UAAU,CAAC,sBAAsB;YACtD,mBAAmB,EAAE,UAAU,CAAC,qBAAqB;YACrD,eAAe,EAAE,UAAU,CAAC,iBAAiB;YAC7C,mBAAmB,EAAE,UAAU,CAAC,sBAAsB;YACtD,qBAAqB,EAAE,UAAU,CAAC,uBAAuB;YACzD,sBAAsB,EAAE,UAAU,CAAC,wBAAwB;YAC3D,qBAAqB,EAAE,UAAU,CAAC,uBAAuB;YACzD,qBAAqB,EAAE,UAAU,CAAC,uBAAuB;SACzD,CAAC;;IACH,CAAC;IACK,oDAAM,GAAZ,UAAa,KAAyC;;;;;;wBAC/C,OAAO,GAAqD,IAAI,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC;6BACxF,OAAO,EAAP,wBAAO;;;;wBAEM,qBAAM,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,aAAa,EAAE,EAAE,KAAK,CAAC,EAAA;;wBAAxD,MAAM,GAAG,SAA+C;wBAC9D,sBAAO,IAAI,CAAC,SAAS,EAAE,CAAC,WAAW,CAAC,MAAM,CAAC,EAAC;;;wBAE5C,sBAAO,IAAI,CAAC,SAAS,EAAE,CAAC,SAAS,CAAC,GAAC,CAAC,EAAC;;;oBAGtC,+DAA+D;oBAC/D,wBAAwB;oBACxB,sBAAO,IAAI,CAAC,SAAS,EAAE,CAAC,UAAU,EAAE,EAAC;;;;;KAEtC;IACF,0CAAC;AAAD,CA5CA,AA4CC,CA5CwD,0CAAkC,GA4C1F;AA5CY,kFAAmC","file":"workspace.js","sourcesContent":["import { WorkspaceExtensions } from 'last-hit-types';\nimport { AbstractExtensionEntryPointWrapper, IExtensionEntryPointHelper } from '../../types';\n\nexport type EventHandler<E extends WorkspaceExtensions.WorkspaceEvent> = (event: E) => Promise<any>;\n\nexport class WorkspaceExtensionEntryPointWrapper extends AbstractExtensionEntryPointWrapper<\n\tWorkspaceExtensions.IWorkspaceExtensionEntryPoint\n> {\n\tprivate handlers: {\n\t\t[key in WorkspaceExtensions.WorkspaceEventTypes]: EventHandler<\n\t\t\tWorkspaceExtensions.WorkspaceEvent\n\t\t>;\n\t};\n\n\tconstructor(\n\t\tentrypoint: WorkspaceExtensions.IWorkspaceExtensionEntryPoint,\n\t\thelper: IExtensionEntryPointHelper\n\t) {\n\t\tsuper(entrypoint, helper);\n\n\t\tthis.handlers = {\n\t\t\t'env-prepare': entrypoint.handleEnvironmentPrepare,\n\t\t\t'story-prepare': entrypoint.handleStoryPrepare,\n\t\t\t'flow-should-start': entrypoint.handleFlowShouldStart,\n\t\t\t'flow-accomplished': entrypoint.handleFlowAccomplished,\n\t\t\t'step-should-start': entrypoint.handleStepShouldStart,\n\t\t\t'step-on-error': entrypoint.handleStepOnError,\n\t\t\t'step-accomplished': entrypoint.handleStepAccomplished,\n\t\t\t'reload-all-handlers': entrypoint.handleReloadAllHandlers,\n\t\t\t'reload-story-handler': entrypoint.handleReloadStoryHandler,\n\t\t\t'reload-flow-handler': entrypoint.handleReloadFlowHandler,\n\t\t\t'reload-step-handler': entrypoint.handleReloadStepHandler\n\t\t};\n\t}\n\tasync handle(event: WorkspaceExtensions.WorkspaceEvent): Promise<void> {\n\t\tconst handler: EventHandler<WorkspaceExtensions.WorkspaceEvent> = this.handlers[event.type];\n\t\tif (handler) {\n\t\t\ttry {\n\t\t\t\tconst result = await handler.call(this.getEntrypoint(), event);\n\t\t\t\treturn this.getHelper().sendMessage(result);\n\t\t\t} catch (e) {\n\t\t\t\treturn this.getHelper().sendError(e);\n\t\t\t}\n\t\t} else {\n\t\t\t// console.error(`Handler not found for event[${event.type}]`);\n\t\t\t// console.error(event);\n\t\t\treturn this.getHelper().sendIgnore();\n\t\t}\n\t}\n}\n"]}